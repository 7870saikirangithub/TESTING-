1.create a REST Assured program 

package com.Restassured.RestAssured;

import org.junit.Assert;
import org.testng.annotations.Test;
import io.restassured.RestAssured;
import io.restassured.path.json.JsonPath;
import io.restassured.response.Response;

public class VerifyCurrencyName {
 @Test
  public void verifyCurrencyName(){
	 Response response = RestAssured
			 .when()
			 .get("https://restcountries.com/v3.1/name/japan")
		.then()
		    .extract().response();
	 
	 JsonPath jsonPath =  response.jsonPath();
	 
	 Assert.assertTrue(jsonPath.get("[0].currencies.JPY.name").toString().equals("Japanese yen"));
	 //Assert.assertTrue(jsonPath.get("[0].capital[0]").toString().equals("Tokyo"));
			
 }
}
--------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------


GET REQUESST 


package com.Restassured.RestAssured;

import org.testng.annotations.Test;

import io.restassured.RestAssured;

public class GETDemo {
 @Test
 public void getServerResponse() {
	 RestAssured
	    .when()
	       .get("https://restcountries.com/v3.1/all")
	          .then()
	                .assertThat()
	                .statusCode(200)
	                .log().all();
 }
}
-------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------
POST REQuest for Reqres


package com.Restassured.RestAssured;

import java.util.HashMap;

import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import io.restassured.RestAssured;

public class POSTDemo {
HashMap<String, String> map = new HashMap<String, String>();
@BeforeMethod
public void createpayLoad() {
	map.put("name","morpheus");
	map.put("job","painter");
	RestAssured.baseURI = "https://reqres.in/";
	RestAssured.basePath = "/api/users";
}
@Test
public void createResource() {
	RestAssured
	     .given()
	          .contentType("application/json")
	             .body(map)
	           .when()
	             .post()
	             .then()
	               .statusCode(201)
	               .log().all();
}

}

-------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------



  UPDATE REQUREST  

 PUT request  


package com.Restassured.RestAssured;

import java.util.HashMap;

import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import io.restassured.RestAssured;

public class PUTDemo {
	HashMap<String, String> map = new HashMap<String, String>();
	@BeforeMethod
	public void createpayLoad() {
		map.put("name","morpheus");
		map.put("job","programmer");
		RestAssured.baseURI = "https://reqres.in/";
		RestAssured.basePath = "/api/users/275";
}
	@Test
	public void updateResource() {
		RestAssured
		   .given()
		        .contentType("application/json")
		        .body(map)
		     .when()
		           .put()
		      .then()
		           .statusCode(200)
		           .log().all();
	}
}
----------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------


 DELETE Requests


package com.Restassured.RestAssured;

import org.testng.annotations.Test;

import io.restassured.RestAssured;

public class DELETEDemo {
@Test
public void deleteResource() {
	RestAssured.baseURI = "https://reqres.in/";
	RestAssured.basePath = "/api/users/275";
	
	RestAssured
	.when()
	      .delete()
	 .then()
	 .statusCode(204);
}
}
------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------


SOAP REQUESTS


package com.Restassured.RestAssured;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;

import org.apache.commons.io.IOUtils;
import org.testng.annotations.Test;

import io.restassured.RestAssured;

public class SOAPDemo {
@Test
  public void getCaptial() throws IOException{
	FileInputStream fis = new FileInputStream(new File("captials.xml"));
	RestAssured.baseURI ="http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL" ;
	 RestAssured 
	 .given()
	       .header("Content-Type","text/xml")
	       .body(IOUtils.toString(fis,"UTF-8"))
	       .when()
	          .post()
	       .then()
	         .statusCode(200)
	         .log().all();
}

}
----------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------



 post rquest for  gorest 

package com.Restassured.RestAssured;

import java.util.HashMap;

import org.junit.Assert;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import io.restassured.RestAssured;
import io.restassured.path.json.JsonPath;
import io.restassured.response.Response;

public class PUTDemoBearerToken {
	HashMap<String, String> map = new HashMap<String, String>();
	 @BeforeMethod
	 public void createPayLoad() {
		 map.put("name", "bothasaikiran");
		 map.put("email","bothasaikiran@gmail.com");
		 map.put("gender","male");
		 map.put("status", "active");
		 RestAssured.baseURI = "https://gorest.co.in/";
		 RestAssured.basePath = "public/v2/users/4495000";
}
	 @Test
	 public void updateResource() {
		 
Response  response = RestAssured
		  .given()
		      .contentType("application/json")
		      .header("Authorization","Bearer af1f25ca115c58f2381766637f199ee267fc10c80fd7d86df3683c065b7dd5d3")
		      .body(map)
		 .when()
		     .put()
		 .then() 
		      .extract().response();

JsonPath jsonPath =  response.jsonPath();
Assert.assertTrue(jsonPath.get("name").toString().equals("bothasaikiran"));
	 }
}
----------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------


GET  rqusts

package com.Restassured.RestAssured;

import org.testng.annotations.Test;

import io.restassured.RestAssured;

public class GETDemoBearerToken {
@Test
 public void verifyResource() {
	RestAssured
	  .given()
	       .contentType("application/json")
	       .header("Authorization","Bearer af1f25ca115c58f2381766637f199ee267fc10c80fd7d86df3683c065b7dd5d3")
	    .when()
	       .get("https://gorest.co.in/public/v2/users/4495000")
	    .then()
	       .statusCode(200)
	       .log().all();
}
}
-----------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------


 put /UPDATE rquests
package com.Restassured.RestAssured;

import java.util.HashMap;

import org.junit.Assert;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import io.restassured.RestAssured;
import io.restassured.path.json.JsonPath;
import io.restassured.response.Response;

public class PUTDemoBearerToken {
	HashMap<String, String> map = new HashMap<String, String>();
	 @BeforeMethod
	 public void createPayLoad() {
		 map.put("name", "bothasaikiran");
		 map.put("email","bothasaikiran@gmail.com");
		 map.put("gender","male");
		 map.put("status", "active");
		 RestAssured.baseURI = "https://gorest.co.in/";
		 RestAssured.basePath = "public/v2/users/4495000";
}
	 @Test
	 public void updateResource() {
		 
Response  response = RestAssured
		  .given()
		      .contentType("application/json")
		      .header("Authorization","Bearer af1f25ca115c58f2381766637f199ee267fc10c80fd7d86df3683c065b7dd5d3")
		      .body(map)
		 .when()
		     .put()
		 .then() 
		      .extract().response();

JsonPath jsonPath =  response.jsonPath();
Assert.assertTrue(jsonPath.get("name").toString().equals("bothasaikiran"));
	 }
}
----------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------

API  KEY DEMO


package com.Restassured.RestAssured;

import org.testng.annotations.Test;

import io.restassured.RestAssured;

public class APIDemo {
@Test
public void  getWeatherInfo() {
	RestAssured
	   .given()
	       .param("q","chennai")
	       .param("appid", "693fe9bb87da5f8770e37333371febd2")
	    .when()
	        .get("https://api.openweathermap.org/data/2.5/weather")
	      .then()  
	         .statusCode(200)
	         .log().all();
}  
}

--------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------
CREATE AND UPADTE  AND DELETE AND VERIFY  REQUESTS IN ONE DEMO



package com.Restassured.RestAssured;

import java.util.HashMap;
import java.util.UUID;

import org.junit.Assert;
//import org.testng.annotations.BeforeMethod;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;

import io.restassured.RestAssured;
import io.restassured.path.json.JsonPath;
import io.restassured.response.Response;
import static org.hamcrest.Matchers.is;

public class Create_Update_Delete_Resource  extends TestBase {
 HashMap<String, String> map =  new HashMap<String, String>();
  UUID uuid = UUID.randomUUID();
  int id;
  Response response;
  JsonPath jsonPath;
  
  @Test(priority=0)
  public void creataPayload() {
	  map.put("name", "Captain Planet");
		 map.put("email",uuid+"@gmail.com");
		 map.put("gender","male");
		 map.put("status", "active");
		 RestAssured.baseURI = "https://gorest.co.in";
		 RestAssured.basePath = "public/v2/users";
		 logger.info("Payload created");
  }
   @Test(priority=1)
    public void  createResource() {
	    response =  RestAssured
	    		 .given()
			        .contentType("application/json")
			        .body(map)
			        .header("Authorization","Bearer af1f25ca115c58f2381766637f199ee267fc10c80fd7d86df3683c065b7dd5d3")
			          .when()
			             .post()
			          .then()   
			              .extract().response();
	    logger.info("Resource Created Successfully");
	    jsonPath = response.jsonPath();
	    id = jsonPath.getInt("id");
	    System.out.println(id);
			             
   }
   @Test(priority=2)

   public void verifyResource() {
   	System.out.println("Id = " + id);
   	RestAssured
       .given()
              .contentType("application/json")
              .header("Authorization", "Bearer af1f25ca115c58f2381766637f199ee267fc10c80fd7d86df3683c065b7dd5d3")
        .when()
              .get("https://gorest.co.in/public/v2/users/"+id)
        .then()
                .statusCode(200);
             
   	
   	logger.info("Resource Verified");
              
   	Assert.assertTrue(jsonPath.get("name").equals("Captain Planet"));


   	
   }

   @Test(priority=3)

   public void updateResource() {
   	map.put("name", "Captain Planett");
   	map.put("email", uuid + "@gmail.com");
   	map.put("gender", "male");
   	map.put("status", "Active");
   	RestAssured.baseURI = "https://gorest.co.in";
   	RestAssured.basePath = "public/v2/users/" + id;
   	RestAssured
       .given()
              .contentType("application/json")
              .header("Authorization", "Bearer af1f25ca115c58f2381766637f199ee267fc10c80fd7d86df3683c065b7dd5d3")
               .body(map)
        .when()
              .put()
              
        .then()
               .statusCode(200)
              
   	         .assertThat()
   	         .body("name", is("Captain Planett"));
   	 logger.info("Resource Updated");
   }
   @Test(priority=4)
   public void deleteResource() {
   	RestAssured.baseURI = "https://gorest.co.in";
   	RestAssured.basePath = "public/v2/users/" + id;
   	RestAssured
       .given()
              .contentType("application/json")
              .header("Authorization", "Bearer af1f25ca115c58f2381766637f199ee267fc10c80fd7d86df3683c065b7dd5d3")
              
        .when()
              .delete()
              
        .then()
               .statusCode(204);
   	logger.info("Resource Deleted");
   	
   }
   }
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------TEST BASESD dEMO

package com.Restassured.RestAssured;

import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.PropertyConfigurator;
import org.testng.annotations.BeforeClass;

import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;

public class TestBase {
 public static RequestSpecification httpRequest;
 public static Response response;
 
 
 public Logger logger;
 
 
 @BeforeClass
 public void setUp() {
	 logger = Logger.getLogger("LogDemo");
	 PropertyConfigurator.configure("log4j.properties");
	 logger.setLevel(Level.DEBUG);
 }
}
------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------
log4j.rootLogger=ERROR,stdout
log4j.logger.com.endeca=INFO
log4j.logger.LogDemo=DEBUG, dest1
# Logger for crawl metrics
log4j.logger.com.endeca.itl.web.metrics=INFO

log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%p\t%d{ISO8601}\t%r\t%c\t[%t]\t%m%n
--------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.Restassured</groupId>
  <artifactId>RestAssured</artifactId>
  <version>0.0.1-SNAPSHOT</version>

  <name>RestAssured</name>
  <!-- FIXME change it to the project's website -->
  <url>http://www.example.com</url>

  <properties>
		<serenity.version>1.5.8</serenity.version>
		<serenity.maven.version>1.5.8</serenity.maven.version>
		<slf4j.version>1.6.1</slf4j.version>
		<maven.failsafe.plugin.version>2.18</maven.failsafe.plugin.version>
		<maven.compiler.plugin.version>3.2</maven.compiler.plugin.version>
		<java.version>1.8</java.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>net.serenity-bdd</groupId>
			<artifactId>serenity-core</artifactId>
			<version>${serenity.version}</version>
		</dependency>
		<dependency>
			<groupId>net.serenity-bdd</groupId>
			<artifactId>serenity-rest-assured</artifactId>
			<version>${serenity.version}</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-simple</artifactId>
			<version>${slf4j.version}</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.testng/testng -->
		<dependency>
			<groupId>org.testng</groupId>
			<artifactId>testng</artifactId>
			<version>7.1.0</version>
			<scope>test</scope>
		</dependency>

		<!-- API, java.xml.bind module -->
		<dependency>
			<groupId>jakarta.xml.bind</groupId>
			<artifactId>jakarta.xml.bind-api</artifactId>
			<version>2.3.2</version>
		</dependency>

		<!-- Runtime, com.sun.xml.bind module -->
		<dependency>
			<groupId>org.glassfish.jaxb</groupId>
			<artifactId>jaxb-runtime</artifactId>
			<version>2.3.2</version>
		</dependency>
<!-- https://mvnrepository.com/artifact/log4j/log4j-->
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.17</version>
		</dependency>

	</dependencies>

  <build>
    <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
      <plugins>
        <!-- clean lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#clean_Lifecycle -->
        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>3.1.0</version>
        </plugin>
        <!-- default lifecycle, jar packaging: see https://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging -->
        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.8.0</version>
        </plugin>
        <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.22.1</version>
        </plugin>
        <plugin>
          <artifactId>maven-jar-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-install-plugin</artifactId>
          <version>2.5.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>2.8.2</version>
        </plugin>
        <!-- site lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#site_Lifecycle -->
        <plugin>
          <artifactId>maven-site-plugin</artifactId>
          <version>3.7.1</version>
        </plugin>
        <plugin>
          <artifactId>maven-project-info-reports-plugin</artifactId>
          <version>3.0.0</version>
        </plugin>
      </plugins>
    </pluginManagement>
  </build>
</project>
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
